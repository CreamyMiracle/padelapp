@page "/new"
@page "/game/{OpenGameId}"
@inject IGameAPI GameClient
@inject NavigationManager NavigationManager
@using PadelApp.Model.Dto
@using PaldeApp;
@using System.Net;
@inject NavigationManager NavManager

<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<style>
    body {
        margin: 10px;
        padding: 0;
        z-index: 2147483647;
    }

    .base-container {
        display: grid;
        z-index: 2147483647;
    }

    .container {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        height: 85vh;
        width: 100%;
        z-index: 214748367;
    }

    .court {
        position: relative;
        height: 100%;
        width: 100%;
        border: 3px solid gray;
        border-radius: 10px;
        background-color: #1E8FD5;
        z-index: 21474836;
    }

    .line {
        position: absolute;
        background-color: gray;
    }


    .center-line {
        width: 3px;
        top: 15.25%;
        bottom: 15.25%;
        left: 50%;
        transform: translateX(-50%);
        background-color: white;
    }

    .net-line {
        height: 3px;
        width: 100%;
        top: 50%;
        background-color: white;
    }

    .service-line {
        height: 3px;
        width: 100%;
        top: 15.25%;
        background-color: white;
    }

    .back-wall-line {
        height: 3px;
        width: 100%;
        bottom: 15.25%;
        background-color: white;
    }

    table {
        width: 100%;
        height: 85vh; /* update: stretch table to the whole screen */
        border-collapse: collapse;
    }

    .td {
        padding: 5px;
        text-align: center;
        overflow: hidden;
        white-space: nowrap;
        max-width: 0;
        z-index: 2147483647;
    }

    .td-button {
        padding: 10px;
        text-align: center;
        overflow: hidden;
        white-space: nowrap;
        max-width: 0;
    }

    .td-open-game-input {
        padding: 5px;
        text-align: center;
        overflow: hidden;
        max-width: 0;
    }

    .middle-td {
        text-align: center;
        width: 10%;
    }

    .middle-td-end {
        text-align: center;
        width: 10%;
    }

    .point-input {
        width: 30px;
        height: 30px;
        text-align: center;
        background-color: transparent;
        border: 1px solid black;
        outline: none;
    }

    .point-input-readonly {
        width: 30%;
        height: 30%;
        text-align: center;
        background-color: transparent;
        border: 1px solid #1E8FD5;
        outline: none;
    }

    .name-input {
        width: 90%;
        text-align: center;
        background-color: transparent;
        white-space: nowrap;
        border: 1px solid black;
        border-radius: 5px;
        outline: none;
    }

    .name-input-readonly {
        width: 90%;
        text-align: center;
        background-color: transparent;
        white-space: nowrap;
        border: 1px solid #1E8FD5;
        border-radius: 5px;
        outline: none;
    }

    .open-game-input {
        width: 70%;
        text-align: center;
        background-color: transparent;
        white-space: nowrap;
        border-radius: 5px;
        outline: none;
        float: left;
        display: inline-block;
    }

    .open-game-button {
        float: right;
        display: inline-block;
        width: 25%;
    }

    .layer-name {
        grid-column: 1;
        grid-row: 1;
        height: 25%;
    }

    .layer-top {
        grid-column: 1;
        grid-row: 2;
        z-index: 2147483647;
    }

    .layer-bot {
        grid-column: 1;
        grid-row: 2;
        z-index: -214743647;
    }

    .layer-open {
        grid-column: 1;
        grid-row: 3;
        height: 25%;
    }


    html * {
        font-family: "Open Sans", sans-serif;
        font-size: 103%;
    }
</style>

<body>
    <div class="base-container">
        <table class="layer-name">
            <tr>
                <td class="td-open-game-input">
                    <input class="open-game-input" @bind-value="OpenGameRequestId" />
                    <button class="open-game-button" @onclick="@(() => NavManager.NavigateTo("/game/" + _openGameRequestId, true))">Open</button>
                </td>
            </tr>
        </table>
        <div class="container">
            <div class="court">
                <div class="layer-bot">
                    <div class="line center-line"></div>
                    <div class="line net-line"></div>
                    <div class="line service-line"></div>
                    <div class="line back-wall-line"></div>
                </div>
                <div class="layer-top">
                    <table>
                        <tr>
                            <td @onclick="@(() => DecrementCurrValue(0, 1))" class="td-button">-</td>
                            <td class="middle-td">
                                @if (game != null && game.Games.ElementAt(0).Key != "1" && game.Games.ElementAt(1).Key != "2" && game.Games.ElementAt(0).Value.Count != 0 && game.Games.ElementAt(1).Value.Count != 0)
                                {
                                    <input class="point-input" value="@game.Games.ElementAt(0).Value.Last()" @onchange="@((e) => CurrSetChanged(0, 1, e.Value.ToString()))" />
                                }
                                else
                                {
                                    <input class="point-input-readonly" readonly />
                                }
                            </td>
                            <td @onclick="@(() => IncrementCurrValue(0, 1))" class="td-button">+</td>
                        </tr>
                        <tr>
                            <td class="td" style="font-size: 70%;">
                                @if (true)
                                {
                                    List<KeyValuePair<bool, int>> games = CapsGames(game.Games.ElementAt(0).Key);

                                    for (int i = 0; i < games.Count; i++)
                                    {
                                        if (i != 0 && i != games.Count && games.Count > 1)
                                        {
                                            <label>|</label>
                                        }
                                        var pair = games[i];

                                        if (pair.Key)
                                        {
                                            <b>@pair.Value</b>
                                        }
                                        else
                                        {
                                            <small style="font-size: 90%;">@pair.Value</small>
                                        }  
                                    }
                                }
                            </td>

                            <td class="middle-td"></td>

                            <td class="td" style="font-size: 70%;">
                                @if (true)
                                {
                                    List<KeyValuePair<bool, int>> games = CapsGames(game.Games.ElementAt(1).Key);

                                    for (int i = 0; i < games.Count; i++)
                                    {
                                        if (i != 0 && i != games.Count && games.Count > 1)
                                        {
                                            <label>|</label>
                                        }
                                        var pair = games[i];

                                        if (pair.Key)
                                        {
                                            <b>@pair.Value</b>
                                        }
                                        else
                                        {
                                            <small style="font-size: 90%;">@pair.Value</small>
                                        }
                                    }
                                }
                            </td>
                        </tr>
                        <tr>
                            @if (game != null && game.Games.ElementAt(0).Key != "1" && !CurrentlyRenaming[0])
                            {
                                <td class="td">
                                    <input class="name-input-readonly" type="text" value=@game.Games.ElementAt(0).Key readonly @ondblclick="(() => Rename(0, true))" />
                                </td>
                            }
                            else
                            {
                                <td class="td">
                                    <input class="name-input" type="text" placeholder="Name" @bind-value="NewPlayerNames[0]" @onblur="(()=> AddNewRow(0))" />
                                </td>
                            }
                            <td class="middle-td"></td>
                            @if (game != null && game.Games.ElementAt(1).Key != "2" && !CurrentlyRenaming[1])
                            {
                                <td class="td">
                                    <input class="name-input-readonly" type="text" value=@game.Games.ElementAt(1).Key readonly @ondblclick="(() => Rename(1, true))" />
                                </td>
                            }
                            else
                            {
                                <td class="td">
                                    <input class="name-input" type="text" placeholder="Name" @bind-value="NewPlayerNames[1]" @onblur="(()=> AddNewRow(1))" />
                                </td>
                            }
                        </tr>
                        <tr>
                            @if (game != null && game.Games.ElementAt(0).Key != "1")
                            {
                                <td class="td">@game.Games.ElementAt(0).Value.SkipLast(1).Sum()</td>
                            }
                            else
                            {
                                <td class="td">0</td>
                            }
                            <td class="middle-td"></td>
                            @if (game != null && game.Games.ElementAt(1).Key != "2")
                            {
                                <td class="td">@game.Games.ElementAt(1).Value.SkipLast(1).Sum()</td>
                            }
                            else
                            {
                                <td class="td">0</td>
                            }
                        </tr>
                        <tr>
                            @if (game != null && game.Games.ElementAt(2).Key != "3")
                            {
                                <td class="td">@game.Games.ElementAt(2).Value.SkipLast(1).Sum()</td>
                            }
                            else
                            {
                                <td class="td">0</td>
                            }
                            <td class="middle-td"></td>
                            @if (game != null && game.Games.ElementAt(3).Key != "4")
                            {
                                <td class="td">@game.Games.ElementAt(3).Value.SkipLast(1).Sum()</td>
                            }
                            else
                            {
                                <td class="td">0</td>
                            }
                        </tr>
                        <tr>
                            @if (game != null && game.Games.ElementAt(2).Key != "3" && !CurrentlyRenaming[2])
                            {
                                <td class="td">
                                    <input class="name-input-readonly" type="text" value=@game.Games.ElementAt(2).Key readonly @ondblclick="(() => Rename(2, true))" />
                                </td>
                            }
                            else
                            {
                                <td class="td">
                                    <input class="name-input" type="text" placeholder="Name" @bind-value="NewPlayerNames[2]" @onblur="(()=> AddNewRow(2))" />
                                </td>
                            }
                            <td class="middle-td"></td>
                            @if (game != null && game.Games.ElementAt(3).Key != "4" && !CurrentlyRenaming[3])
                            {
                                <td class="td">
                                    <input class="name-input-readonly" type="text" value=@game.Games.ElementAt(3).Key readonly @ondblclick="(() => Rename(3, true))" />
                                </td>
                            }
                            else
                            {
                                <td class="td">
                                    <input class="name-input" type="text" placeholder="Name" @bind-value="NewPlayerNames[3]" @onblur="(()=> AddNewRow(3))" />
                                </td>
                            }
                        </tr>
                        <tr>
                            <td class="td" style="font-size: 70%;">
                                @if (true)
                                {
                                    List<KeyValuePair<bool, int>> games = CapsGames(game.Games.ElementAt(2).Key);

                                    for (int i = 0; i < games.Count; i++)
                                    {
                                        if (i != 0 && i != games.Count && games.Count > 1)
                                        {
                                            <label>|</label>
                                        }
                                        var pair = games[i];

                                        if (pair.Key)
                                        {
                                            <b>@pair.Value</b>
                                        }
                                        else
                                        {
                                            <small style="font-size: 90%;">@pair.Value</small>
                                        }
                                    }
                                }
                            </td>

                            <td class="middle-td"></td>

                            <td class="td" style="font-size: 70%;">
                                @if (true)
                                {
                                    List<KeyValuePair<bool, int>> games = CapsGames(game.Games.ElementAt(3).Key);

                                    for (int i = 0; i < games.Count; i++)
                                    {
                                        if (i != 0 && i != games.Count && games.Count > 1)
                                        {
                                            <label>|</label>
                                        }
                                        var pair = games[i];

                                        if (pair.Key)
                                        {
                                            <b>@pair.Value</b>
                                        }
                                        else
                                        {
                                            <small style="font-size: 90%;">@pair.Value</small>
                                        }  
                                    }
                                }
                            </td>
                        </tr>
                        <tr>
                            <td @onclick="@(() => DecrementCurrValue(2, 3))" class="td-button">-</td>
                            <td class="middle-td">
                                @if (game != null && game.Games.ElementAt(2).Key != "3" && game.Games.ElementAt(3).Key != "4" && game.Games.ElementAt(2).Value.Count != 0 && game.Games.ElementAt(3).Value.Count != 0)
                                {
                                    <input class="point-input" value="@game.Games.ElementAt(2).Value.Last()" @onchange="@((e) => CurrSetChanged(2, 3, e.Value.ToString()))" />
                                }
                                else
                                {
                                    <input class="point-input-readonly" readonly />
                                }
                            </td>
                            <td @onclick="@(() => IncrementCurrValue(2, 3))" class="td-button">+</td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        <table class="layer-open">
            <tr>
                <td class="td-open-game-input">
                    <button style="width:100%;" @onclick="EndGame">Switch</button>
                </td>
            </tr>
        </table>
    </div>
</body>



@code {
    private Dictionary<int, bool> CurrentlyRenaming = new Dictionary<int, bool>() { { 0, false }, { 1, false }, { 2, false }, { 3, false } };

    private string OpenGameRequestId
    {
        get
        {
            return game == null || game.Id == null ? GetUniqueId() : game.Id;
        }
        set
        {
            _openGameRequestId = value;
        }
    }

    private string _openGameRequestId;

    [Parameter]
    public string OpenGameId { get; set; }

    private SessionDto game = new SessionDto()
        {
            Id = null,
            Games = new Dictionary<string, List<int>>()
        {
            { "1", new List<int>() { 0 } },
            { "2", new List<int>() { 0 } },
            { "3", new List<int>() { 0 } },
            { "4", new List<int>() { 0 } }
        }
        };

    private HashSet<string> expandedRows = new HashSet<string>();

    private List<string> NewPlayerNames = new List<string>() { "", "", "", "" };

    private string GetUniqueId()
    {
        return Convert.ToBase64String(BitConverter.GetBytes(DateTime.UtcNow.Ticks)).Replace('+', '_').Replace('/', '-').TrimEnd('=');
    }

    protected override async void OnInitialized()
    {
        if (!string.IsNullOrEmpty(OpenGameId))
        {
            OpenGame(OpenGameId);
        }
        else
        {
            var res = await GameClient.GetGame();
            SessionDto cookieGame = res.Content;
            if (cookieGame != null)
            {
                game = cookieGame;
                OpenGameId = game.Id;
            }
            else
            {
                OpenGameId = GetUniqueId();
            }

            NavManager.NavigateTo("/game/" + OpenGameId, true);
        }

        StateHasChanged();
    }

    private bool AllReady()
    {
        return game != null && !game.Games.ContainsKey("1") && !game.Games.ContainsKey("2") && !game.Games.ContainsKey("3") && !game.Games.ContainsKey("4");
    }

    private List<KeyValuePair<bool, int>> CapsGames(string playerName)
    {
        KeyValuePair<string, List<int>> currGame = game.Games.Where(kv => kv.Key == playerName).FirstOrDefault();
        List<KeyValuePair<bool, int>> boldPoints = new List<KeyValuePair<bool, int>>();

        List<List<int>> normalizedGames = new List<List<int>>();
        List<int> currNormalizedGames = new List<int>();

        foreach (var oldGame in game.Games)
        {
            int currZeros = game.Games.Values.MaxBy(list => list.Count).Count - oldGame.Value.SkipLast(1).Count() - 1;
            List<int> currGameHistory = new List<int>(new int[currZeros]).Concat(oldGame.Value.SkipLast(1)).ToList();

            if (oldGame.Key == playerName)
            {
                currNormalizedGames = new List<int>(currGameHistory);
                continue;
            }
            normalizedGames.Add(new List<int>(currGameHistory));
        }


        for (int i = 0; i < currNormalizedGames.Count; i++)
        {
            int currPoint = currNormalizedGames[i];
            bool highest = true;
            bool tie = true;

            foreach (List<int> otherPoints in normalizedGames)
            {
                if (normalizedGames.Count == 0 || otherPoints.Count == 0)
                {
                    continue;
                }
                int otherPoint = otherPoints[i];
                if (otherPoint > currPoint)
                {
                    highest = false;
                }
                if (otherPoint != currPoint)
                {
                    tie = false;
                }
            }

            highest = tie ? false : highest;

            boldPoints.Add(new KeyValuePair<bool, int>(highest, currPoint));
        }

        return boldPoints;
    }

    private int WinCount(string playerName)
    {
        return CapsGames(playerName).Where(kv => kv.Key).Count();
    }

    private async void OpenGame(string gameId)
    {
        if (!string.IsNullOrEmpty(gameId))
        {
            var res = await GameClient.GetGame(gameId);
            if (res.StatusCode == HttpStatusCode.NotFound)
            {
                SessionDto newGame = new SessionDto()
                    {
                        Id = gameId,
                        Games = new Dictionary<string, List<int>>()
                    {
                        { "1", new List<int>() { 0 } },
                        { "2", new List<int>() { 0 } },
                        { "3", new List<int>() { 0 } },
                        { "4", new List<int>() { 0 } }
                    }
                    };
                var res2 = await GameClient.UpdateGame(newGame);
                game = res2.Content;
                _openGameRequestId = game.Id;
            }
            else if (res.IsSuccessStatusCode)
            {
                game = res.Content;
                _openGameRequestId = game.Id;
            }
        }
        StateHasChanged();
    }

    private async void IncrementCurrValue(int ind1, int ind2)
    {
        if (game.Games.Count() >= ind1 + 1)
        {
            var valueList1 = game.Games.ElementAt(ind1).Value;
            var lastValue1 = valueList1.Last();
            valueList1[valueList1.Count - 1] = lastValue1 + 1;
        }

        if (game.Games.Count() >= ind2 + 1)
        {
            var valueList2 = game.Games.ElementAt(ind2).Value;
            var lastValue2 = valueList2.Last();
            valueList2[valueList2.Count - 1] = lastValue2 + 1;
        }

        var res = await GameClient.UpdateGame(game);
        game = res.Content;
    }

    private async void DecrementCurrValue(int ind1, int ind2)
    {
        if (game.Games.Count() >= ind1 + 1)
        {
            var valueList1 = game.Games.ElementAt(ind1).Value;
            var lastValue1 = valueList1.Last();
            valueList1[valueList1.Count - 1] = lastValue1 - 1;
        }

        if (game.Games.Count() >= ind2 + 1)
        {
            var valueList2 = game.Games.ElementAt(ind2).Value;
            var lastValue2 = valueList2.Last();
            valueList2[valueList2.Count - 1] = lastValue2 - 1;
        }
        var res = await GameClient.UpdateGame(game);
        game = res.Content;
    }

    private async void CurrSetChanged(int ind1, int ind2, string currSet)
    {
        if (!AllReady())
        {
            return;
        }

        int num;
        if (int.TryParse(currSet, out num))
        {
            if (game.Games.Count() >= ind1 + 1)
            {
                var valueList1 = game.Games.ElementAt(ind1).Value;
                var lastValue1 = valueList1.Last();
                valueList1[valueList1.Count - 1] = num;
            }

            if (game.Games.Count() >= ind2 + 1)
            {
                var valueList2 = game.Games.ElementAt(ind2).Value;
                var lastValue2 = valueList2.Last();
                valueList2[valueList2.Count - 1] = num;
            }

            var res = await GameClient.UpdateGame(game);
            game = res.Content;
        }
    }

    private void Rename(int ind, bool rename)
    {
        CurrentlyRenaming[ind] = rename;
    }

    private async void AddNewRow(int ind)
    {
        Rename(ind, false);

        Dictionary<string, List<int>> newGames = new Dictionary<string, List<int>>();
        if (game.Games.ContainsKey(NewPlayerNames[ind]) || string.IsNullOrEmpty(NewPlayerNames[ind]))
        {
            return;
        }

        for (int i = 0; i < 4; i++)
        {
            string name = game.Games.ElementAt(i).Key;
            if (ind == i)
            {
                name = NewPlayerNames[ind];
            }
            newGames.Add(name, game.Games.ElementAt(i).Value);
        }
        game.Games = newGames;
        var res = await GameClient.UpdateGame(game);
        game = (res).Content;
    }

    private async void DeleteRow(string playerName)
    {
        game.Games.Remove(playerName);

        var res = await GameClient.UpdateGame(game);
        game = res.Content;
    }

    private async void EndGame()
    {
        if (!AllReady())
        {
            return;
        }

        foreach (var entry in game.Games)
        {
            entry.Value.Add(0);
        }

        int nextCombination = game.LatestCombination == 2 ? 0 : game.LatestCombination + 1;

        Dictionary<string, List<int>> newGames = new Dictionary<string, List<int>>();

        if (nextCombination == 0)
        {
            newGames.Add(game.Games.ElementAt(1).Key, game.Games.ElementAt(1).Value); // 1=>0
            newGames.Add(game.Games.ElementAt(3).Key, game.Games.ElementAt(3).Value); // 3=>1
            newGames.Add(game.Games.ElementAt(2).Key, game.Games.ElementAt(2).Value); // 2=>2
            newGames.Add(game.Games.ElementAt(0).Key, game.Games.ElementAt(0).Value); // 0=>3
        }
        else if (nextCombination == 1)
        {
            newGames.Add(game.Games.ElementAt(2).Key, game.Games.ElementAt(2).Value); // 2=>0
            newGames.Add(game.Games.ElementAt(0).Key, game.Games.ElementAt(0).Value); // 0=>1
            newGames.Add(game.Games.ElementAt(3).Key, game.Games.ElementAt(3).Value); // 3=>2
            newGames.Add(game.Games.ElementAt(1).Key, game.Games.ElementAt(1).Value); // 1=>3
        }
        else if (nextCombination == 2)
        {
            newGames.Add(game.Games.ElementAt(2).Key, game.Games.ElementAt(2).Value); // 2=>0
            newGames.Add(game.Games.ElementAt(1).Key, game.Games.ElementAt(1).Value); // 1=>1
            newGames.Add(game.Games.ElementAt(0).Key, game.Games.ElementAt(0).Value); // 0=>2
            newGames.Add(game.Games.ElementAt(3).Key, game.Games.ElementAt(3).Value); // 3=>3
        }

        game.Games = newGames;
        game.LatestCombination = nextCombination;
        var res = await GameClient.UpdateGame(game);
        game = res.Content;
    }
}
