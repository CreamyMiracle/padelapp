@page "/"
@inject IGameAPI GameClient
@using PadelApp.Model.Dto
@using PaldeApp;

<h1 class="game-table-heading">Game Table</h1>

<table class="game-table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Total points</th>
            <th>Points</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var set in game.Sets)
        {
            <tr class="game-table-row" onclick="@(() => ToggleRow(set.Key))">
                <td>@set.Key</td>
                <td class="game-table-total-points">
                    <label> @set.Value.SkipLast(1).Sum() </label>
                </td>
                <td class="game-table-points">
                    <input @onclick:stopPropagation="true" @onclick:preventDefault="true" type="number" value="@game.Sets[set.Key].Last()" @onchange="@((e) => CurrSetChanged(set.Key, int.Parse(e.Value.ToString())))" />
                </td>
                <td class="game-table-button" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                    <button class="game-table-button-add" @onclick="@(() => IncrementCurrValue(set.Key))">+</button>
                    <button class="game-table-button-subtract" @onclick="@(() => DecrementCurrValue(set.Key))">-</button>
                </td>
            </tr>
            @if (expandedRows.Contains(set.Key))
            {
                <tr class="game-table-row">
                    <td colspan="4">
                        Sets: @string.Join(", ", set.Value.SkipLast(1))
                    </td>
                </tr>
            }
        }
        <tr class="game-table-row">
            <td>Summary</td>
            <td class="game-table-total-points">
                <label> @game.Sets.Values.Select(list => list.SkipLast(1).Sum()).Sum() </label>
            </td>
            <td class="game-table-points">
                <label> @game.Sets.Values.Select(list => list.Last()).Sum() </label>
            </td>
            <td class="game-table-button" colspan="2"></td>
        </tr>
    </tbody>
</table>

<div class="game-table-controls">
    <input type="text" class="game-table-input" placeholder="Name" @bind-value="newPlayerName" />
    <button class="game-table-button" @onclick="AddNewRow">Add Row</button>
    <button class="game-table-button" @onclick="EndSet">End set</button>
</div>


<style>
    /* Page title */
    .page-title {
        font-size: 2rem;
        text-align: center;
        color: #337ab7;
        margin: 1rem 0;
    }

    /* Game table */
    .game-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
        font-size: 1.2rem;
    }

        .game-table th {
            background-color: #f2f2f2;
            font-weight: bold;
            padding: 0.5rem;
            text-align: left;
            border-bottom: 2px solid #337ab7;
        }

        .game-table td {
            padding: 0.5rem;
            text-align: left;
            border-bottom: 1px solid #ccc;
        }

        .game-table tbody tr:hover {
            background-color: #f5f5f5;
            cursor: pointer;
        }

        .game-table .points-input {
            width: 4rem;
            text-align: right;
            border: none;
            background-color: #f2f2f2;
        }

        .game-table .button {
            display: inline-block;
            width: 2rem;
            height: 2rem;
            line-height: 2rem;
            text-align: center;
            background-color: #337ab7;
            color: #fff;
            border: none;
            border-radius: 0.2rem;
            margin-right: 0.5rem;
            cursor: pointer;
        }

            .game-table .button:hover {
                background-color: #23527c;
            }

            .game-table .button:active {
                background-color: #174d75;
            }

        .game-table .sets-row {
            background-color: #f2f2f2;
            font-style: italic;
            padding: 0.5rem;
        }
</style>

@code {
    private GameDto game = new GameDto() { Id = "mau" };
    private HashSet<string> expandedRows = new HashSet<string>();
    private string newPlayerName = "";

    private void ToggleRow(string playerName)
    {
        if (expandedRows.Contains(playerName))
        {
            expandedRows.Remove(playerName);
        }
        else
        {
            expandedRows.Add(playerName);
        }
        StateHasChanged();
    }

    private async void CurrSetChanged(string playerName, int currSet)
    {
        var valueList = game.Sets[playerName];
        valueList[valueList.Count - 1] = currSet;

        await GameClient.UpdateGame(game);
    }

    private async void IncrementCurrValue(string playerName)
    {
        var valueList = game.Sets[playerName];
        var lastValue = valueList.Last();
        valueList[valueList.Count - 1] = lastValue + 1;

        await GameClient.UpdateGame(game);
    }

    private async void DecrementCurrValue(string playerName)
    {
        var valueList = game.Sets[playerName];
        var lastValue = valueList.Last();
        if (lastValue > 0)
        {
            valueList[valueList.Count - 1] = lastValue - 1;
        }

        await GameClient.UpdateGame(game);
    }

    private async void AddNewRow()
    {
        if (!string.IsNullOrEmpty(newPlayerName))
        {
            game.Sets[newPlayerName] = new List<int>() { 0 };
            newPlayerName = "";
        }

        await GameClient.UpdateGame(game);
    }

    private async void EndSet()
    {
        foreach (var entry in game.Sets)
        {
            entry.Value.Add(0);
        }

        await GameClient.UpdateGame(game);
    }
}
