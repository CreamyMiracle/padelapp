@page "/"
@inject IGameAPI GameClient
@using PadelApp.Model.Dto
@using PaldeApp;
@using System.Net;

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<style>
    html * {
        color: #000 !important;
        font-family: "Open Sans", sans-serif;
    }
    /* Make the table responsive */
    .table-responsive {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        border: 1px solid #ddd;
        margin-bottom: 15px;
    }
    /* Adjust table styles */
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    .gametd {
        padding: 2px;
        margin: 2px;
        width: 30px;
        text-align: center;
        border-right: none;
        border-left: none;
        border-bottom: none;
        border-top: none;
        overflow: hidden;
        display: inline-block;
        white-space: nowrap;
    }

    th {
        background-color: #f2f2f2;
        font-weight: bold;
    }
    /* Adjust input and button styles */
    input[type="number"], input[type="text"], button {
        width: 100%;
        max-width: 100px;
        padding: 8px;
        margin: 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    button {
        margin: 2px;
    }

    .redbutton {
        background-color: lightcoral
    }
    /* Adjust form styles */
    .add-row-form {
        display: flex;
        flex-direction: column;
        margin-top: 10px;
    }

        .add-row-form input[type="text"], .add-row-form button {
            width: 100%;
            max-width: none;
            margin: 0;
        }
    /* Adjust header styles */
    header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
    }

    .header-inputs {
        display: flex;
        align-items: center;
        margin-right: 15px;
    }

        .header-inputs input[type="text"], .header-inputs button {
            margin: 0;
            max-width: 70px;
            margin-left: 10px;
            margin-right: 10px;
        }
</style>

<div class="table-responsive">
    <table>
        <thead>
            <tr>
                <th colspan="4">GameId: @game.Id</th>
            </tr>
        </thead>
        <thead>
            <tr>
                <th>Name</th>
                <th>Total/Wins</th>
                <th>Points</th>
                <th>
                    <button @onclick="EndGame" bgcolor="#90EE90">Finish</button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in game.Games.OrderByDescending(game => WinCount(game.Key)).ThenBy(game => game.Key))
            {
                <tr onclick="@(() => ToggleRow(row.Key))">
                    <td>@row.Key</td>
                    <td>@row.Value.SkipLast(1).Sum() / @WinCount(row.Key)</td>
                    <td>
                        <input type="number" @onclick:stopPropagation="true" @onclick:preventDefault="true" value="@game.Games[row.Key].Last()" @onchange="@((e) => CurrSetChanged(row.Key, int.Parse(e.Value.ToString())))" />
                    </td>
                    <td>
                        <button type="button" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="@(() => IncrementCurrValue(row.Key))">+</button>
                        <button type="button" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="@(() => DecrementCurrValue(row.Key))">-</button>
                    </td>
                </tr>
                @if (expandedRows.Contains(row.Key))
                {
                    <tr>
                        <td colspan="3">

                            @if (true)
                            {
                                List<KeyValuePair<bool, int>> boldPoints = CapsGames(row.Key);
                                @foreach (var entry in boldPoints)
                                {
                                    @if (entry.Key)
                                    {
                                    <td class="gametd" bgcolor="#90EE90">
                                         @entry.Value
                                    </td>
                                    }
                                    else
                                    {
                                    <td class="gametd">
                                         @entry.Value
                                    </td>
                                    }
                                }
                            }

                        </td>
                        <td>
                            <button class="redbutton" @onclick="@(() => DeleteRow(row.Key))">Delete</button>
                        </td>
                    </tr>
                }
            }
            <tr style="font-weight:bold">
                <td>Summary</td>
                <td>@game.Games.Values.Select(list => list.SkipLast(1).Sum()).Sum()</td>
                <td>@game.Games.Values.Select(list => list.Last()).Sum()</td>
                <td colspan="1"></td>
            </tr>
            <tr>
                <td colspan="3">
                    <input type="text" placeholder="Name" @bind-value="newPlayerName" />
                </td>
                <td>
                    <button type="button" @onclick="AddNewRow">Add</button>
                </td>
            </tr>
            <tr>
                <td colspan="3">
                    <input type="text" placeholder="Game" @bind-value="openGameId" />
                </td>
                <td>
                    <button type="button" @onclick="OpenGame">Open</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

@code {
    private SessionDto game = new SessionDto() { Id = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss"), Games = new Dictionary<string, List<int>>() };
    private HashSet<string> expandedRows = new HashSet<string>();
    private string newPlayerName = "";
    private string openGameId = "";

    protected async override void OnInitialized()
    {
        openGameId = game.Id;
        SessionDto cookieGame = (await GameClient.GetGame()).Content;
        if (cookieGame != null)
        {
            game = cookieGame;
        }
    }

    private List<KeyValuePair<bool, int>> CapsGames(string playerName)
    {
        KeyValuePair<string, List<int>> currGame = game.Games.Where(kv => kv.Key == playerName).FirstOrDefault();
        List<KeyValuePair<bool, int>> boldPoints = new List<KeyValuePair<bool, int>>();

        List<List<int>> normalizedGames = new List<List<int>>();
        List<int> currNormalizedGames = new List<int>();

        foreach (var oldGame in game.Games)
        {
            int currZeros = game.Games.Values.MaxBy(list => list.Count).Count - oldGame.Value.SkipLast(1).Count() - 1;
            List<int> currGameHistory = new List<int>(new int[currZeros]).Concat(oldGame.Value.SkipLast(1)).ToList();

            if (oldGame.Key == playerName)
            {
                currNormalizedGames = new List<int>(currGameHistory);
                continue;
            }
            normalizedGames.Add(new List<int>(currGameHistory));
        }


        for (int i = 0; i < currNormalizedGames.Count; i++)
        {
            int currPoint = currNormalizedGames[i];
            bool highest = true;

            foreach (List<int> otherPoints in normalizedGames)
            {
                if (normalizedGames.Count == 0 || otherPoints.Count == 0)
                {
                    continue;
                }
                int otherPoint = otherPoints[i];
                if (otherPoint > currPoint)
                {
                    highest = false;
                }
            }

            boldPoints.Add(new KeyValuePair<bool, int>(highest, currPoint));
        }

        return boldPoints;
    }

    private int WinCount(string playerName)
    {
        return CapsGames(playerName).Where(kv => kv.Key).Count();
    }

    private async void OpenGame()
    {
        if (!string.IsNullOrEmpty(openGameId))
        {
            var res = await GameClient.GetGame(openGameId);
            if (res.StatusCode == HttpStatusCode.NotFound)
            {
                game = (await GameClient.UpdateGame(new SessionDto() { Id = openGameId })).Content;
            }
            else
            {
                game = res.Content;
            }
        }
        StateHasChanged();
    }

    private void ToggleRow(string playerName)
    {
        if (expandedRows.Contains(playerName))
        {
            expandedRows.Remove(playerName);
        }
        else
        {
            expandedRows.Add(playerName);
        }
        StateHasChanged();
    }

    private async void CurrSetChanged(string playerName, int currSet)
    {
        var valueList = game.Games[playerName];
        valueList[valueList.Count - 1] = currSet;

        game = (await GameClient.UpdateGame(game)).Content;
    }

    private async void IncrementCurrValue(string playerName)
    {
        var valueList = game.Games[playerName];
        var lastValue = valueList.Last();
        valueList[valueList.Count - 1] = lastValue + 1;

        game = (await GameClient.UpdateGame(game)).Content;
    }

    private async void DecrementCurrValue(string playerName)
    {
        var valueList = game.Games[playerName];
        var lastValue = valueList.Last();
        if (lastValue > 0)
        {
            valueList[valueList.Count - 1] = lastValue - 1;
        }

        game = (await GameClient.UpdateGame(game)).Content;
    }

    private async void AddNewRow()
    {
        if (!string.IsNullOrEmpty(newPlayerName))
        {
            game.Games[newPlayerName] = new List<int>() { 0 };
            newPlayerName = "";
        }

        game = (await GameClient.UpdateGame(game)).Content;
    }

    private async void DeleteRow(string playerName)
    {
        game.Games.Remove(playerName);

        game = (await GameClient.UpdateGame(game)).Content;
    }

    private async void EndGame()
    {
        foreach (var entry in game.Games)
        {
            entry.Value.Add(0);
        }

        game = (await GameClient.UpdateGame(game)).Content;
    }
}
