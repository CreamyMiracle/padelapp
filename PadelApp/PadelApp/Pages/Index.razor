@page "/"
@inject IGameAPI GameClient
@using PadelApp.Model.Dto
@using PaldeApp;
@using System.Net;

<h1>Game Table</h1>

<div>
    <input type="text" placeholder="Game" @bind-value="openGameId" />
    <button @onclick="OpenGame">Open</button>
</div>

<div>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Total points</th>
                <th>Points</th>
                <th>Wins</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var currGame in game.Games)
            {
                <tr onclick="@(() => ToggleRow(currGame.Key))">
                    <td>@currGame.Key</td>
                    <td>@currGame.Value.SkipLast(1).Sum()</td>
                    <td>
                        <input @onclick:stopPropagation="true" @onclick:preventDefault="true" type="number" value="@game.Games[currGame.Key].Last()" @onchange="@((e) => CurrSetChanged(currGame.Key, int.Parse(e.Value.ToString())))" />
                    </td>
                    <td>
                        <label>
                            @WinCount(currGame.Key)
                        </label>
                    </td>
                    <td>
                        <button @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="@(() => IncrementCurrValue(currGame.Key))">+</button>
                        <button @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="@(() => DecrementCurrValue(currGame.Key))">-</button>
                    </td>
                </tr>
                @if (expandedRows.Contains(currGame.Key))
                {
                    <tr>
                        <td colspan="4">
                            @if (true)
                            {
                                List<KeyValuePair<bool, int>> boldPoints = CapsGames(currGame.Key);

                                <label>
                                    Games:
                                </label>

                                string separator = "";
                                for (int i = 0; i < boldPoints.Count; i++)
                                {
                                    KeyValuePair<bool, int> point = boldPoints[i];
                                    separator = " | ";
                                    if (i + 1 == boldPoints.Count)
                                    {
                                        separator = "";
                                    }

                                    if (point.Key)
                                    {
                                        <label style="font-weight:bold">
                                            @point.Value
                                        </label>
                                    }
                                    else
                                    {
                                        <label>
                                            @point.Value
                                        </label>
                                    }

                                    <label>
                                        @separator
                                    </label>
                                }
                            }
                        </td>
                    </tr>
                }
            }
            <tr style="font-weight:bold">
                <td>Summary</td>
                <td>@game.Games.Values.Select(list => list.SkipLast(1).Sum()).Sum()</td>
                <td>@game.Games.Values.Select(list => list.Last()).Sum()</td>
                <td colspan="2"></td>
            </tr>
        </tbody>
    </table>
</div>

<div>
    <input type="text" placeholder="Name" @bind-value="newPlayerName" />
    <button @onclick="AddNewRow">Add Row</button>
    <button @onclick="EndGame">End game</button>
</div>

<style>
    body {
        font-family: Arial, sans-serif;
        font-size: 14px;
        line-height: 1.4;
        color: #333;
        background-color: #f4f4f4;
    }

    h1 {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 20px;
    }

    input[type="text"], input[type="number"] {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
        margin-right: 10px;
        margin-bottom: 10px;
        font-size: 14px;
        width: 200px;
        max-width: 100%;
    }

    button {
        padding: 8px 16px;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        color: #fff;
        font-size: 14px;
        cursor: pointer;
        margin-bottom: 10px;
    }

    table {
        border-collapse: collapse;
        margin-bottom: 20px;
        width: 100%;
    }

    th, td {
        padding: 8px;
        text-align: left;
        vertical-align: middle;
        border: 1px solid #ccc;
    }

    th {
        background-color: #007bff;
        color: #fff;
        font-weight: bold;
    }

    tr:hover {
        background-color: #f4f4f4;
    }

    tr:nth-child(even) {
        background-color: #e6e6e6;
    }

    td:last-child {
        text-align: center;
    }

    .sets {
        font-size: 12px;
        color: #666;
    }

    .summary {
        font-weight: bold;
    }
</style>

@code {
    private SessionDto game = new SessionDto() { Id = DateTime.UtcNow.ToString("MM-dd-yyyy"), Games = new Dictionary<string, List<int>>() };
    private HashSet<string> expandedRows = new HashSet<string>();
    private string newPlayerName = "";
    private string openGameId = "";

    protected async override void OnInitialized()
    {
        SessionDto cookieGame = (await GameClient.GetGame()).Content;
        if (cookieGame != null)
        {
            game = cookieGame;
        }
    }

    private List<KeyValuePair<bool, int>> CapsGames(string playerName)
    {
        KeyValuePair<string, List<int>> currGame = game.Games.Where(kv => kv.Key == playerName).FirstOrDefault();
        List<KeyValuePair<bool, int>> boldPoints = new List<KeyValuePair<bool, int>>();

        List<List<int>> normalizedGames = new List<List<int>>();
        List<int> currNormalizedGames = new List<int>();

        foreach (var oldGame in game.Games)
        {
            int currZeros = game.Games.Values.MaxBy(list => list.Count).Count - oldGame.Value.SkipLast(1).Count() - 1;
            List<int> currGameHistory = new List<int>(new int[currZeros]).Concat(oldGame.Value.SkipLast(1)).ToList();

            if (oldGame.Key == playerName)
            {
                currNormalizedGames = new List<int>(currGameHistory);
                continue;
            }
            normalizedGames.Add(new List<int>(currGameHistory));
        }


        for (int i = 0; i < currNormalizedGames.Count; i++)
        {
            int currPoint = currNormalizedGames[i];
            bool highest = true;

            foreach (List<int> otherPoints in normalizedGames)
            {
                if (normalizedGames.Count == 0 || otherPoints.Count == 0)
                {
                    continue;
                }
                int otherPoint = otherPoints[i];
                if (otherPoint > currPoint)
                {
                    highest = false;
                }
            }

            boldPoints.Add(new KeyValuePair<bool, int>(highest, currPoint));
        }

        return boldPoints;
    }

    private int WinCount(string playerName)
    {
        return CapsGames(playerName).Where(kv => kv.Key).Count();
    }

    private async void OpenGame()
    {
        if (!string.IsNullOrEmpty(openGameId))
        {
            var res = await GameClient.GetGame(openGameId);
            if (res.StatusCode == HttpStatusCode.NotFound)
            {
                game = (await GameClient.UpdateGame(new SessionDto() { Id = openGameId })).Content;
            }
            else
            {
                game = res.Content;
            }
        }
        StateHasChanged();
    }

    private void ToggleRow(string playerName)
    {
        if (expandedRows.Contains(playerName))
        {
            expandedRows.Remove(playerName);
        }
        else
        {
            expandedRows.Add(playerName);
        }
        StateHasChanged();
    }

    private async void CurrSetChanged(string playerName, int currSet)
    {
        var valueList = game.Games[playerName];
        valueList[valueList.Count - 1] = currSet;

        game = (await GameClient.UpdateGame(game)).Content;
    }

    private async void IncrementCurrValue(string playerName)
    {
        var valueList = game.Games[playerName];
        var lastValue = valueList.Last();
        valueList[valueList.Count - 1] = lastValue + 1;

        game = (await GameClient.UpdateGame(game)).Content;
    }

    private async void DecrementCurrValue(string playerName)
    {
        var valueList = game.Games[playerName];
        var lastValue = valueList.Last();
        if (lastValue > 0)
        {
            valueList[valueList.Count - 1] = lastValue - 1;
        }

        game = (await GameClient.UpdateGame(game)).Content;
    }

    private async void AddNewRow()
    {
        if (!string.IsNullOrEmpty(newPlayerName))
        {
            game.Games[newPlayerName] = new List<int>
    () { 0 };
            newPlayerName = "";
        }

        game = (await GameClient.UpdateGame(game)).Content;
    }

    private async void EndGame()
    {
        foreach (var entry in game.Games)
        {
            entry.Value.Add(0);
        }

        game = (await GameClient.UpdateGame(game)).Content;
    }
}
